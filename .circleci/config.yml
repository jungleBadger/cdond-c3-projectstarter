version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
  # This command expects a parameter called 'end'
  npm-install:
    parameters:
      end:
        type: string
    steps:
      - run:
          name: Install parameters.end dependencies
          command: |
            cd << parameters.end >>
            npm i

  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-prod-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-prod-frontend-<<parameters.workflow_id>>

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...
orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@1.3.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: frontend
      - run:
          name: Building Frontend
          command: |
            cd frontend && npm run build
      - slack/notify-on-failure

  build-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: backend
      - run:
          name: Building Backend
          command: |
            cd backend && npm run build
      - slack/notify-on-failure

  test-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Test Frontend
          command: |
            cd frontend
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./frontend/reports/junit/
      - slack/notify-on-failure

  test-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Test Frontend
          command: |
            cd frontend
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./frontend/reports/junit/
      - slack/notify-on-failure

  audit-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Audit Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify-on-failure

  audit-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Audit Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify-on-failure

  deploy-backend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the backend infrastructure using cloudformation
          command: |
            yum -y install tar
            yum -y install gzip
            cd .circleci/files
            aws cloudformation deploy \
              --template-file backend.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save backend URL and IP (for ansible)
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "[all]\n$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            echo "http://${BACKEND_AWS_PUBLIC_IP}:3030" >> .circleci/outputs/backend_url.txt
            cat .circleci/outputs/backend_url.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/backend_url.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the frontend infrastructure using cloudformation
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file frontend.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-cloudfront-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Save previous bucket id suffix
          command: |
            PREVIOUS_BUCKET_ID_SUFFIX=$(aws cloudformation \
                          list-exports --query "Exports[?Name==\`BucketIdSuffix\`].Value" \
                          --no-paginate --output text)
            echo "$PREVIOUS_BUCKET_ID_SUFFIX" >> .circleci/outputs/previous_bucket_id_suffix.txt
            cat .circleci/outputs/previous_bucket_id_suffix.txt
      - run:
          name: Deploy the cloudfront infrastructure using cloudformation
          command: |
            yum -y install tar
            yum -y install gzip
            cd .circleci/files
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/previous_bucket_id_suffix.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

# Added files for push ...

#  configure-infrastructure:

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:

#  smoke-test:

#  cloudfront-update:

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - audit-frontend:
          requires:
            - test-frontend
      - audit-backend:
          requires:
            - test-backend
      - deploy-backend-infrastructure:
          requires:
            - audit-backend
      - deploy-frontend-infrastructure:
          requires:
            - audit-frontend
      - deploy-cloudfront-infrastructure:
          requires:
            - deploy-frontend-infrastructure
            - deploy-backend-infrastructure
