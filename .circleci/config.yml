version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
  # This command expects a parameter called 'end'
  npm-install:
    parameters:
      end:
        type: string
    steps:
      - run:
          name: Install parameters.end dependencies
          command: |
            cd << parameters.end >>
            npm i

  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-prod-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-prod-frontend-<<parameters.workflow_id>>

  revert-migration:
    #     description: Revert the last migration if successfully run in the current workflow.
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            pushd backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm install
              npm run migration:revert
            fi
            popd

orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@1.3.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: frontend
      - run:
          name: Building Frontend
          command: |
            cd frontend && npm run build
      - slack/notify-on-failure

  build-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: backend
      - run:
          name: Building Backend
          command: |
            cd backend && npm run build
      - slack/notify-on-failure

  test-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Test Frontend
          command: |
            cd frontend
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./frontend/reports/junit/
      - slack/notify-on-failure

  test-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Test Frontend
          command: |
            cd frontend
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./frontend/reports/junit/
      - slack/notify-on-failure

  audit-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Audit Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify-on-failure

  audit-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Audit Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify-on-failure

  deploy-backend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the backend infrastructure using cloudformation
          command: |
            yum -y install tar
            yum -y install gzip
            cd .circleci/files
            aws cloudformation deploy \
              --template-file backend.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save backend URL and IP (for ansible)
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "[all]\n$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            echo "http://${BACKEND_AWS_PUBLIC_IP}:3030" >> .circleci/outputs/backend_url.txt
            cat .circleci/outputs/backend_url.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/backend_url.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the frontend infrastructure using cloudformation
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file frontend.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-cloudfront-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Save previous bucket id suffix
          command: |
            PREVIOUS_BUCKET_ID_SUFFIX=$(aws cloudformation \
                          list-exports --query "Exports[?Name==\`BucketIdSuffix\`].Value" \
                          --no-paginate --output text)
            echo "$PREVIOUS_BUCKET_ID_SUFFIX" >> .circleci/outputs/previous_bucket_id_suffix.txt
            cat .circleci/outputs/previous_bucket_id_suffix.txt
      - run:
          name: Deploy the cloudfront infrastructure using cloudformation
          command: |
            yum -y install tar
            yum -y install gzip
            cd .circleci/files
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/previous_bucket_id_suffix.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a3:39:13:52:0e:1e:17:f9:ed:14:a5:6a:3b:39:94:59"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Run DB migrations
          # added second line - npm install -----------------------
          command: |
            pushd backend || exit
            npm install 
            npm run migrations > migration_output.txt
            popd || exit
      - run:
          name: Store migration result in a file.
          command: |
            pushd backend || exit
            if grep -q "has been executed successfully." migration_output.txt
            then
              touch .circleci/outputs/db_migration_success
            fi
            popd || exit
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/db_migration_success/migration_output.txt

  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend app
          command: |
            pushd backend || exit
            npm i
            npm build
            popd || exit
      - run:
          name: Setup EC2 instance & copy compiled backend to the EC2 instance
          command: |
            pushd backend || exit
            ansible-playbook -i inventory.txt playbook.yml
            popd || exit
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migration

  package-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Package frontend app
          command: |
            pushd frontend || exit
            npm i
            npm build
            popd || exit
      - save_cache:
          paths: [frontend/dist]
          key: frontend-dist-build
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migration

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-dist-build]
      - run:
          name: Copy frontend to s3 bucket.
          command: |
            export API_URL=`cat .circleci/outputs/backend_url.txt`
            pushd frontend || exit
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            npm build
            popd || exit
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migration

#  smoke-test:

#  cloudfront-update:

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - audit-frontend:
          requires:
            - test-frontend
      - audit-backend:
          requires:
            - test-backend
      - deploy-backend-infrastructure:
          requires:
            - audit-backend
      - deploy-frontend-infrastructure:
          requires:
            - audit-frontend
      - deploy-cloudfront-infrastructure:
          requires:
            - deploy-frontend-infrastructure
            - deploy-backend-infrastructure
      - configure-infrastructure:
          requires:
            - deploy-cloudfront-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-backend:
          requires:
            - run-migrations
      - package-frontend:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - package-frontend
